// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AlecSmith96/faceit-user-service/internal/adapters (interfaces: KafkaConnection)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=../../mocks/adapters/kafkaConnection.go . KafkaConnection
//
// Package mock_adapters is a generated GoMock package.
package mock_adapters

import (
	reflect "reflect"
	time "time"

	kafka "github.com/segmentio/kafka-go"
	gomock "go.uber.org/mock/gomock"
)

// MockKafkaConnection is a mock of KafkaConnection interface.
type MockKafkaConnection struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaConnectionMockRecorder
}

// MockKafkaConnectionMockRecorder is the mock recorder for MockKafkaConnection.
type MockKafkaConnectionMockRecorder struct {
	mock *MockKafkaConnection
}

// NewMockKafkaConnection creates a new mock instance.
func NewMockKafkaConnection(ctrl *gomock.Controller) *MockKafkaConnection {
	mock := &MockKafkaConnection{ctrl: ctrl}
	mock.recorder = &MockKafkaConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaConnection) EXPECT() *MockKafkaConnectionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockKafkaConnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockKafkaConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKafkaConnection)(nil).Close))
}

// SetWriteDeadline mocks base method.
func (m *MockKafkaConnection) SetWriteDeadline(arg0 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline.
func (mr *MockKafkaConnectionMockRecorder) SetWriteDeadline(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockKafkaConnection)(nil).SetWriteDeadline), arg0)
}

// WriteMessages mocks base method.
func (m *MockKafkaConnection) WriteMessages(arg0 ...kafka.Message) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WriteMessages", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteMessages indicates an expected call of WriteMessages.
func (mr *MockKafkaConnectionMockRecorder) WriteMessages(arg0 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessages", reflect.TypeOf((*MockKafkaConnection)(nil).WriteMessages), arg0...)
}
