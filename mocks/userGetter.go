// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AlecSmith96/faceit-user-service/internal/usecases (interfaces: UserGetter)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=../../mocks/userGetter.go . UserGetter
//
// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"

	entities "github.com/AlecSmith96/faceit-user-service/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockUserGetter is a mock of UserGetter interface.
type MockUserGetter struct {
	ctrl     *gomock.Controller
	recorder *MockUserGetterMockRecorder
}

// MockUserGetterMockRecorder is the mock recorder for MockUserGetter.
type MockUserGetterMockRecorder struct {
	mock *MockUserGetter
}

// NewMockUserGetter creates a new mock instance.
func NewMockUserGetter(ctrl *gomock.Controller) *MockUserGetter {
	mock := &MockUserGetter{ctrl: ctrl}
	mock.recorder = &MockUserGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserGetter) EXPECT() *MockUserGetterMockRecorder {
	return m.recorder
}

// GetPaginatedUsers mocks base method.
func (m *MockUserGetter) GetPaginatedUsers(arg0 context.Context, arg1, arg2, arg3, arg4, arg5 string, arg6 entities.PageInfo) ([]entities.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaginatedUsers", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].([]entities.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPaginatedUsers indicates an expected call of GetPaginatedUsers.
func (mr *MockUserGetterMockRecorder) GetPaginatedUsers(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaginatedUsers", reflect.TypeOf((*MockUserGetter)(nil).GetPaginatedUsers), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}
